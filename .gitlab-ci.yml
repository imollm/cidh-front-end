stages:
  - install
  - test
  - build
  - deploy

variables:
  npm_config_cache: '$CI_PROJECT_DIR/.npm'
  CYPRESS_CACHE_FOLDER: '$CI_PROJECT_DIR/cache/Cypress'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache/*
    - cache/Cypress
    - node_modules
    - test
    - build
    - deploy

# install:
#   image: node:14.15.5-alpine3.13
#   stage: install
#   script:
#     - npm ci

# lint:
#   stage: test
#   image: node:14.15-alpine3.13
#   script:
#     - echo "Lint project"
#     - npm run lint
#   cache:
#     paths:
#       - node_modules
#   only:
#     refs:
#       - main
#       - merge_request

e2e:
  stage: test
  image: cypress/browsers:node14.15.0-chrome86-ff82
  script:
    - echo "Start e2e tests"
    - npm ci
    - npm run start:ci
    - npm run e2e
  artifacts:
    when: always
    paths:
      - "cypress/videos/**/*.mp4"
      - "cypress/screenshots/**/*.png"
    expire_in: 1 days
  only:
    refs:
      - main
      - merge_request

build:
  stage: build
  image: node:14.15-alpine3.13
  script:
    - echo -e "Start building"
    - npm run build:ci
    - mkdir conf
    - cp docker-compose.yml conf
    - cp nginx.conf conf
    - cp Makefile conf
  cache:
    paths:
      - dist/
      - conf/
  only:
    refs:
      - main
      - merge_request

deploy:
  variables:
    MASTER_SSH_KEY: $MASTER_SSH_KEY
  image: kroniak/ssh-client
  stage: deploy
  environment:
    name: production
    url: https://culture.indahou.se
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo "$MASTER_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - scp -r dist/ $MASTER_HOST:/var/www/html
    - scp -r conf/ $MASTER_HOST:/var/www/html
    - ssh $MASTER_HOST 'chmod 700 -R /var/www/html/conf'
    - ssh $MASTER_HOST 'docker-compose -f /var/www/html/conf/docker-compose.yml up -d'
  only:
    - main
    - merge_request
